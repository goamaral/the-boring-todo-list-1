// Code generated by mockery v2.36.1. DO NOT EDIT.

package mock_repository

import (
	context "context"

	entity "example.com/the-boring-to-do-list-1/internal/entity"
	gorm_provider "example.com/the-boring-to-do-list-1/pkg/gorm_provider"

	mock "github.com/stretchr/testify/mock"
)

// AbstractTaskRepository is an autogenerated mock type for the AbstractTaskRepository type
type AbstractTaskRepository struct {
	mock.Mock
}

type AbstractTaskRepository_Expecter struct {
	mock *mock.Mock
}

func (_m *AbstractTaskRepository) EXPECT() *AbstractTaskRepository_Expecter {
	return &AbstractTaskRepository_Expecter{mock: &_m.Mock}
}

// Create provides a mock function with given fields: ctx, record, opts
func (_m *AbstractTaskRepository) Create(ctx context.Context, record *entity.Task, opts ...interface{}) error {
	var _ca []interface{}
	_ca = append(_ca, ctx, record)
	_ca = append(_ca, opts...)
	ret := _m.Called(_ca...)

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, *entity.Task, ...interface{}) error); ok {
		r0 = rf(ctx, record, opts...)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// AbstractTaskRepository_Create_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Create'
type AbstractTaskRepository_Create_Call struct {
	*mock.Call
}

// Create is a helper method to define mock.On call
//   - ctx context.Context
//   - record *entity.Task
//   - opts ...interface{}
func (_e *AbstractTaskRepository_Expecter) Create(ctx interface{}, record interface{}, opts ...interface{}) *AbstractTaskRepository_Create_Call {
	return &AbstractTaskRepository_Create_Call{Call: _e.mock.On("Create",
		append([]interface{}{ctx, record}, opts...)...)}
}

func (_c *AbstractTaskRepository_Create_Call) Run(run func(ctx context.Context, record *entity.Task, opts ...interface{})) *AbstractTaskRepository_Create_Call {
	_c.Call.Run(func(args mock.Arguments) {
		variadicArgs := make([]interface{}, len(args)-2)
		for i, a := range args[2:] {
			if a != nil {
				variadicArgs[i] = a.(interface{})
			}
		}
		run(args[0].(context.Context), args[1].(*entity.Task), variadicArgs...)
	})
	return _c
}

func (_c *AbstractTaskRepository_Create_Call) Return(_a0 error) *AbstractTaskRepository_Create_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *AbstractTaskRepository_Create_Call) RunAndReturn(run func(context.Context, *entity.Task, ...interface{}) error) *AbstractTaskRepository_Create_Call {
	_c.Call.Return(run)
	return _c
}

// Delete provides a mock function with given fields: ctx, opts
func (_m *AbstractTaskRepository) Delete(ctx context.Context, opts ...interface{}) error {
	var _ca []interface{}
	_ca = append(_ca, ctx)
	_ca = append(_ca, opts...)
	ret := _m.Called(_ca...)

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, ...interface{}) error); ok {
		r0 = rf(ctx, opts...)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// AbstractTaskRepository_Delete_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Delete'
type AbstractTaskRepository_Delete_Call struct {
	*mock.Call
}

// Delete is a helper method to define mock.On call
//   - ctx context.Context
//   - opts ...interface{}
func (_e *AbstractTaskRepository_Expecter) Delete(ctx interface{}, opts ...interface{}) *AbstractTaskRepository_Delete_Call {
	return &AbstractTaskRepository_Delete_Call{Call: _e.mock.On("Delete",
		append([]interface{}{ctx}, opts...)...)}
}

func (_c *AbstractTaskRepository_Delete_Call) Run(run func(ctx context.Context, opts ...interface{})) *AbstractTaskRepository_Delete_Call {
	_c.Call.Run(func(args mock.Arguments) {
		variadicArgs := make([]interface{}, len(args)-1)
		for i, a := range args[1:] {
			if a != nil {
				variadicArgs[i] = a.(interface{})
			}
		}
		run(args[0].(context.Context), variadicArgs...)
	})
	return _c
}

func (_c *AbstractTaskRepository_Delete_Call) Return(_a0 error) *AbstractTaskRepository_Delete_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *AbstractTaskRepository_Delete_Call) RunAndReturn(run func(context.Context, ...interface{}) error) *AbstractTaskRepository_Delete_Call {
	_c.Call.Return(run)
	return _c
}

// Find provides a mock function with given fields: ctx, opts
func (_m *AbstractTaskRepository) Find(ctx context.Context, opts ...interface{}) ([]entity.Task, error) {
	var _ca []interface{}
	_ca = append(_ca, ctx)
	_ca = append(_ca, opts...)
	ret := _m.Called(_ca...)

	var r0 []entity.Task
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, ...interface{}) ([]entity.Task, error)); ok {
		return rf(ctx, opts...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, ...interface{}) []entity.Task); ok {
		r0 = rf(ctx, opts...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]entity.Task)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, ...interface{}) error); ok {
		r1 = rf(ctx, opts...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// AbstractTaskRepository_Find_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Find'
type AbstractTaskRepository_Find_Call struct {
	*mock.Call
}

// Find is a helper method to define mock.On call
//   - ctx context.Context
//   - opts ...interface{}
func (_e *AbstractTaskRepository_Expecter) Find(ctx interface{}, opts ...interface{}) *AbstractTaskRepository_Find_Call {
	return &AbstractTaskRepository_Find_Call{Call: _e.mock.On("Find",
		append([]interface{}{ctx}, opts...)...)}
}

func (_c *AbstractTaskRepository_Find_Call) Run(run func(ctx context.Context, opts ...interface{})) *AbstractTaskRepository_Find_Call {
	_c.Call.Run(func(args mock.Arguments) {
		variadicArgs := make([]interface{}, len(args)-1)
		for i, a := range args[1:] {
			if a != nil {
				variadicArgs[i] = a.(interface{})
			}
		}
		run(args[0].(context.Context), variadicArgs...)
	})
	return _c
}

func (_c *AbstractTaskRepository_Find_Call) Return(_a0 []entity.Task, _a1 error) *AbstractTaskRepository_Find_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *AbstractTaskRepository_Find_Call) RunAndReturn(run func(context.Context, ...interface{}) ([]entity.Task, error)) *AbstractTaskRepository_Find_Call {
	_c.Call.Return(run)
	return _c
}

// FindInBatches provides a mock function with given fields: ctx, bacthSize, fn, opts
func (_m *AbstractTaskRepository) FindInBatches(ctx context.Context, bacthSize int, fn func([]entity.Task) error, opts ...interface{}) error {
	var _ca []interface{}
	_ca = append(_ca, ctx, bacthSize, fn)
	_ca = append(_ca, opts...)
	ret := _m.Called(_ca...)

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, int, func([]entity.Task) error, ...interface{}) error); ok {
		r0 = rf(ctx, bacthSize, fn, opts...)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// AbstractTaskRepository_FindInBatches_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'FindInBatches'
type AbstractTaskRepository_FindInBatches_Call struct {
	*mock.Call
}

// FindInBatches is a helper method to define mock.On call
//   - ctx context.Context
//   - bacthSize int
//   - fn func([]entity.Task) error
//   - opts ...interface{}
func (_e *AbstractTaskRepository_Expecter) FindInBatches(ctx interface{}, bacthSize interface{}, fn interface{}, opts ...interface{}) *AbstractTaskRepository_FindInBatches_Call {
	return &AbstractTaskRepository_FindInBatches_Call{Call: _e.mock.On("FindInBatches",
		append([]interface{}{ctx, bacthSize, fn}, opts...)...)}
}

func (_c *AbstractTaskRepository_FindInBatches_Call) Run(run func(ctx context.Context, bacthSize int, fn func([]entity.Task) error, opts ...interface{})) *AbstractTaskRepository_FindInBatches_Call {
	_c.Call.Run(func(args mock.Arguments) {
		variadicArgs := make([]interface{}, len(args)-3)
		for i, a := range args[3:] {
			if a != nil {
				variadicArgs[i] = a.(interface{})
			}
		}
		run(args[0].(context.Context), args[1].(int), args[2].(func([]entity.Task) error), variadicArgs...)
	})
	return _c
}

func (_c *AbstractTaskRepository_FindInBatches_Call) Return(_a0 error) *AbstractTaskRepository_FindInBatches_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *AbstractTaskRepository_FindInBatches_Call) RunAndReturn(run func(context.Context, int, func([]entity.Task) error, ...interface{}) error) *AbstractTaskRepository_FindInBatches_Call {
	_c.Call.Return(run)
	return _c
}

// FindOne provides a mock function with given fields: ctx, opts
func (_m *AbstractTaskRepository) FindOne(ctx context.Context, opts ...interface{}) (entity.Task, error) {
	var _ca []interface{}
	_ca = append(_ca, ctx)
	_ca = append(_ca, opts...)
	ret := _m.Called(_ca...)

	var r0 entity.Task
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, ...interface{}) (entity.Task, error)); ok {
		return rf(ctx, opts...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, ...interface{}) entity.Task); ok {
		r0 = rf(ctx, opts...)
	} else {
		r0 = ret.Get(0).(entity.Task)
	}

	if rf, ok := ret.Get(1).(func(context.Context, ...interface{}) error); ok {
		r1 = rf(ctx, opts...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// AbstractTaskRepository_FindOne_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'FindOne'
type AbstractTaskRepository_FindOne_Call struct {
	*mock.Call
}

// FindOne is a helper method to define mock.On call
//   - ctx context.Context
//   - opts ...interface{}
func (_e *AbstractTaskRepository_Expecter) FindOne(ctx interface{}, opts ...interface{}) *AbstractTaskRepository_FindOne_Call {
	return &AbstractTaskRepository_FindOne_Call{Call: _e.mock.On("FindOne",
		append([]interface{}{ctx}, opts...)...)}
}

func (_c *AbstractTaskRepository_FindOne_Call) Run(run func(ctx context.Context, opts ...interface{})) *AbstractTaskRepository_FindOne_Call {
	_c.Call.Run(func(args mock.Arguments) {
		variadicArgs := make([]interface{}, len(args)-1)
		for i, a := range args[1:] {
			if a != nil {
				variadicArgs[i] = a.(interface{})
			}
		}
		run(args[0].(context.Context), variadicArgs...)
	})
	return _c
}

func (_c *AbstractTaskRepository_FindOne_Call) Return(_a0 entity.Task, _a1 error) *AbstractTaskRepository_FindOne_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *AbstractTaskRepository_FindOne_Call) RunAndReturn(run func(context.Context, ...interface{}) (entity.Task, error)) *AbstractTaskRepository_FindOne_Call {
	_c.Call.Return(run)
	return _c
}

// First provides a mock function with given fields: ctx, opts
func (_m *AbstractTaskRepository) First(ctx context.Context, opts ...interface{}) (entity.Task, bool, error) {
	var _ca []interface{}
	_ca = append(_ca, ctx)
	_ca = append(_ca, opts...)
	ret := _m.Called(_ca...)

	var r0 entity.Task
	var r1 bool
	var r2 error
	if rf, ok := ret.Get(0).(func(context.Context, ...interface{}) (entity.Task, bool, error)); ok {
		return rf(ctx, opts...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, ...interface{}) entity.Task); ok {
		r0 = rf(ctx, opts...)
	} else {
		r0 = ret.Get(0).(entity.Task)
	}

	if rf, ok := ret.Get(1).(func(context.Context, ...interface{}) bool); ok {
		r1 = rf(ctx, opts...)
	} else {
		r1 = ret.Get(1).(bool)
	}

	if rf, ok := ret.Get(2).(func(context.Context, ...interface{}) error); ok {
		r2 = rf(ctx, opts...)
	} else {
		r2 = ret.Error(2)
	}

	return r0, r1, r2
}

// AbstractTaskRepository_First_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'First'
type AbstractTaskRepository_First_Call struct {
	*mock.Call
}

// First is a helper method to define mock.On call
//   - ctx context.Context
//   - opts ...interface{}
func (_e *AbstractTaskRepository_Expecter) First(ctx interface{}, opts ...interface{}) *AbstractTaskRepository_First_Call {
	return &AbstractTaskRepository_First_Call{Call: _e.mock.On("First",
		append([]interface{}{ctx}, opts...)...)}
}

func (_c *AbstractTaskRepository_First_Call) Run(run func(ctx context.Context, opts ...interface{})) *AbstractTaskRepository_First_Call {
	_c.Call.Run(func(args mock.Arguments) {
		variadicArgs := make([]interface{}, len(args)-1)
		for i, a := range args[1:] {
			if a != nil {
				variadicArgs[i] = a.(interface{})
			}
		}
		run(args[0].(context.Context), variadicArgs...)
	})
	return _c
}

func (_c *AbstractTaskRepository_First_Call) Return(_a0 entity.Task, _a1 bool, _a2 error) *AbstractTaskRepository_First_Call {
	_c.Call.Return(_a0, _a1, _a2)
	return _c
}

func (_c *AbstractTaskRepository_First_Call) RunAndReturn(run func(context.Context, ...interface{}) (entity.Task, bool, error)) *AbstractTaskRepository_First_Call {
	_c.Call.Return(run)
	return _c
}

// NewQuery provides a mock function with given fields: ctx, opts
func (_m *AbstractTaskRepository) NewQuery(ctx context.Context, opts ...interface{}) gorm_provider.Query[entity.Task] {
	var _ca []interface{}
	_ca = append(_ca, ctx)
	_ca = append(_ca, opts...)
	ret := _m.Called(_ca...)

	var r0 gorm_provider.Query[entity.Task]
	if rf, ok := ret.Get(0).(func(context.Context, ...interface{}) gorm_provider.Query[entity.Task]); ok {
		r0 = rf(ctx, opts...)
	} else {
		r0 = ret.Get(0).(gorm_provider.Query[entity.Task])
	}

	return r0
}

// AbstractTaskRepository_NewQuery_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'NewQuery'
type AbstractTaskRepository_NewQuery_Call struct {
	*mock.Call
}

// NewQuery is a helper method to define mock.On call
//   - ctx context.Context
//   - opts ...interface{}
func (_e *AbstractTaskRepository_Expecter) NewQuery(ctx interface{}, opts ...interface{}) *AbstractTaskRepository_NewQuery_Call {
	return &AbstractTaskRepository_NewQuery_Call{Call: _e.mock.On("NewQuery",
		append([]interface{}{ctx}, opts...)...)}
}

func (_c *AbstractTaskRepository_NewQuery_Call) Run(run func(ctx context.Context, opts ...interface{})) *AbstractTaskRepository_NewQuery_Call {
	_c.Call.Run(func(args mock.Arguments) {
		variadicArgs := make([]interface{}, len(args)-1)
		for i, a := range args[1:] {
			if a != nil {
				variadicArgs[i] = a.(interface{})
			}
		}
		run(args[0].(context.Context), variadicArgs...)
	})
	return _c
}

func (_c *AbstractTaskRepository_NewQuery_Call) Return(_a0 gorm_provider.Query[entity.Task]) *AbstractTaskRepository_NewQuery_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *AbstractTaskRepository_NewQuery_Call) RunAndReturn(run func(context.Context, ...interface{}) gorm_provider.Query[entity.Task]) *AbstractTaskRepository_NewQuery_Call {
	_c.Call.Return(run)
	return _c
}

// NewTransaction provides a mock function with given fields: ctx, fc
func (_m *AbstractTaskRepository) NewTransaction(ctx context.Context, fc func(context.Context) error) error {
	ret := _m.Called(ctx, fc)

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, func(context.Context) error) error); ok {
		r0 = rf(ctx, fc)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// AbstractTaskRepository_NewTransaction_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'NewTransaction'
type AbstractTaskRepository_NewTransaction_Call struct {
	*mock.Call
}

// NewTransaction is a helper method to define mock.On call
//   - ctx context.Context
//   - fc func(context.Context) error
func (_e *AbstractTaskRepository_Expecter) NewTransaction(ctx interface{}, fc interface{}) *AbstractTaskRepository_NewTransaction_Call {
	return &AbstractTaskRepository_NewTransaction_Call{Call: _e.mock.On("NewTransaction", ctx, fc)}
}

func (_c *AbstractTaskRepository_NewTransaction_Call) Run(run func(ctx context.Context, fc func(context.Context) error)) *AbstractTaskRepository_NewTransaction_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(func(context.Context) error))
	})
	return _c
}

func (_c *AbstractTaskRepository_NewTransaction_Call) Return(_a0 error) *AbstractTaskRepository_NewTransaction_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *AbstractTaskRepository_NewTransaction_Call) RunAndReturn(run func(context.Context, func(context.Context) error) error) *AbstractTaskRepository_NewTransaction_Call {
	_c.Call.Return(run)
	return _c
}

// Update provides a mock function with given fields: ctx, update, opts
func (_m *AbstractTaskRepository) Update(ctx context.Context, update interface{}, opts ...interface{}) error {
	var _ca []interface{}
	_ca = append(_ca, ctx, update)
	_ca = append(_ca, opts...)
	ret := _m.Called(_ca...)

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, interface{}, ...interface{}) error); ok {
		r0 = rf(ctx, update, opts...)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// AbstractTaskRepository_Update_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Update'
type AbstractTaskRepository_Update_Call struct {
	*mock.Call
}

// Update is a helper method to define mock.On call
//   - ctx context.Context
//   - update interface{}
//   - opts ...interface{}
func (_e *AbstractTaskRepository_Expecter) Update(ctx interface{}, update interface{}, opts ...interface{}) *AbstractTaskRepository_Update_Call {
	return &AbstractTaskRepository_Update_Call{Call: _e.mock.On("Update",
		append([]interface{}{ctx, update}, opts...)...)}
}

func (_c *AbstractTaskRepository_Update_Call) Run(run func(ctx context.Context, update interface{}, opts ...interface{})) *AbstractTaskRepository_Update_Call {
	_c.Call.Run(func(args mock.Arguments) {
		variadicArgs := make([]interface{}, len(args)-2)
		for i, a := range args[2:] {
			if a != nil {
				variadicArgs[i] = a.(interface{})
			}
		}
		run(args[0].(context.Context), args[1].(interface{}), variadicArgs...)
	})
	return _c
}

func (_c *AbstractTaskRepository_Update_Call) Return(_a0 error) *AbstractTaskRepository_Update_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *AbstractTaskRepository_Update_Call) RunAndReturn(run func(context.Context, interface{}, ...interface{}) error) *AbstractTaskRepository_Update_Call {
	_c.Call.Return(run)
	return _c
}

// NewAbstractTaskRepository creates a new instance of AbstractTaskRepository. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewAbstractTaskRepository(t interface {
	mock.TestingT
	Cleanup(func())
}) *AbstractTaskRepository {
	mock := &AbstractTaskRepository{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
