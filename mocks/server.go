// Code generated by mockery v2.14.0. DO NOT EDIT.

package mocks

import (
	http "net/http"

	mock "github.com/stretchr/testify/mock"
)

// Server is an autogenerated mock type for the Server type
type Server struct {
	mock.Mock
}

// Run provides a mock function with given fields:
func (_m *Server) Run() error {
	ret := _m.Called()

	var r0 error
	if rf, ok := ret.Get(0).(func() error); ok {
		r0 = rf()
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// Test provides a mock function with given fields: req, msTimeout
func (_m *Server) Test(req *http.Request, msTimeout ...int) (*http.Response, error) {
	_va := make([]interface{}, len(msTimeout))
	for _i := range msTimeout {
		_va[_i] = msTimeout[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, req)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	var r0 *http.Response
	if rf, ok := ret.Get(0).(func(*http.Request, ...int) *http.Response); ok {
		r0 = rf(req, msTimeout...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*http.Response)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(*http.Request, ...int) error); ok {
		r1 = rf(req, msTimeout...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

type mockConstructorTestingTNewServer interface {
	mock.TestingT
	Cleanup(func())
}

// NewServer creates a new instance of Server. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
func NewServer(t mockConstructorTestingTNewServer) *Server {
	mock := &Server{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
