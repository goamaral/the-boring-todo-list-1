// Code generated by mockery v2.14.0. DO NOT EDIT.

package mocks

import (
	mock "github.com/stretchr/testify/mock"
	db "go.m3o.com/db"
)

// M3ODb is an autogenerated mock type for the M3ODb type
type M3ODb struct {
	mock.Mock
}

// Count provides a mock function with given fields: _a0
func (_m *M3ODb) Count(_a0 *db.CountRequest) (*db.CountResponse, error) {
	ret := _m.Called(_a0)

	var r0 *db.CountResponse
	if rf, ok := ret.Get(0).(func(*db.CountRequest) *db.CountResponse); ok {
		r0 = rf(_a0)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*db.CountResponse)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(*db.CountRequest) error); ok {
		r1 = rf(_a0)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// Create provides a mock function with given fields: _a0
func (_m *M3ODb) Create(_a0 *db.CreateRequest) (*db.CreateResponse, error) {
	ret := _m.Called(_a0)

	var r0 *db.CreateResponse
	if rf, ok := ret.Get(0).(func(*db.CreateRequest) *db.CreateResponse); ok {
		r0 = rf(_a0)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*db.CreateResponse)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(*db.CreateRequest) error); ok {
		r1 = rf(_a0)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// Delete provides a mock function with given fields: _a0
func (_m *M3ODb) Delete(_a0 *db.DeleteRequest) (*db.DeleteResponse, error) {
	ret := _m.Called(_a0)

	var r0 *db.DeleteResponse
	if rf, ok := ret.Get(0).(func(*db.DeleteRequest) *db.DeleteResponse); ok {
		r0 = rf(_a0)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*db.DeleteResponse)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(*db.DeleteRequest) error); ok {
		r1 = rf(_a0)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// DropTable provides a mock function with given fields: _a0
func (_m *M3ODb) DropTable(_a0 *db.DropTableRequest) (*db.DropTableResponse, error) {
	ret := _m.Called(_a0)

	var r0 *db.DropTableResponse
	if rf, ok := ret.Get(0).(func(*db.DropTableRequest) *db.DropTableResponse); ok {
		r0 = rf(_a0)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*db.DropTableResponse)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(*db.DropTableRequest) error); ok {
		r1 = rf(_a0)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// ListTables provides a mock function with given fields: _a0
func (_m *M3ODb) ListTables(_a0 *db.ListTablesRequest) (*db.ListTablesResponse, error) {
	ret := _m.Called(_a0)

	var r0 *db.ListTablesResponse
	if rf, ok := ret.Get(0).(func(*db.ListTablesRequest) *db.ListTablesResponse); ok {
		r0 = rf(_a0)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*db.ListTablesResponse)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(*db.ListTablesRequest) error); ok {
		r1 = rf(_a0)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// Read provides a mock function with given fields: _a0
func (_m *M3ODb) Read(_a0 *db.ReadRequest) (*db.ReadResponse, error) {
	ret := _m.Called(_a0)

	var r0 *db.ReadResponse
	if rf, ok := ret.Get(0).(func(*db.ReadRequest) *db.ReadResponse); ok {
		r0 = rf(_a0)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*db.ReadResponse)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(*db.ReadRequest) error); ok {
		r1 = rf(_a0)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// RenameTable provides a mock function with given fields: _a0
func (_m *M3ODb) RenameTable(_a0 *db.RenameTableRequest) (*db.RenameTableResponse, error) {
	ret := _m.Called(_a0)

	var r0 *db.RenameTableResponse
	if rf, ok := ret.Get(0).(func(*db.RenameTableRequest) *db.RenameTableResponse); ok {
		r0 = rf(_a0)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*db.RenameTableResponse)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(*db.RenameTableRequest) error); ok {
		r1 = rf(_a0)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// Truncate provides a mock function with given fields: _a0
func (_m *M3ODb) Truncate(_a0 *db.TruncateRequest) (*db.TruncateResponse, error) {
	ret := _m.Called(_a0)

	var r0 *db.TruncateResponse
	if rf, ok := ret.Get(0).(func(*db.TruncateRequest) *db.TruncateResponse); ok {
		r0 = rf(_a0)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*db.TruncateResponse)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(*db.TruncateRequest) error); ok {
		r1 = rf(_a0)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// Update provides a mock function with given fields: _a0
func (_m *M3ODb) Update(_a0 *db.UpdateRequest) (*db.UpdateResponse, error) {
	ret := _m.Called(_a0)

	var r0 *db.UpdateResponse
	if rf, ok := ret.Get(0).(func(*db.UpdateRequest) *db.UpdateResponse); ok {
		r0 = rf(_a0)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*db.UpdateResponse)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(*db.UpdateRequest) error); ok {
		r1 = rf(_a0)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

type mockConstructorTestingTNewM3ODb interface {
	mock.TestingT
	Cleanup(func())
}

// NewM3ODb creates a new instance of M3ODb. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
func NewM3ODb(t mockConstructorTestingTNewM3ODb) *M3ODb {
	mock := &M3ODb{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
