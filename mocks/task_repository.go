// Code generated by mockery v2.16.0. DO NOT EDIT.

package mocks

import (
	context "context"

	entity "example.com/the-boring-to-do-list-1/internal/entity"
	gormprovider "example.com/the-boring-to-do-list-1/pkg/provider/gorm"

	mock "github.com/stretchr/testify/mock"
)

// TaskRepository is an autogenerated mock type for the TaskRepository type
type TaskRepository struct {
	mock.Mock
}

// CreateTask provides a mock function with given fields: ctx, task
func (_m *TaskRepository) CreateTask(ctx context.Context, task *entity.Task) error {
	ret := _m.Called(ctx, task)

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, *entity.Task) error); ok {
		r0 = rf(ctx, task)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// ListTasks provides a mock function with given fields: ctx, opts
func (_m *TaskRepository) ListTasks(ctx context.Context, opts ...gormprovider.QueryOption) ([]entity.Task, error) {
	_va := make([]interface{}, len(opts))
	for _i := range opts {
		_va[_i] = opts[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	var r0 []entity.Task
	if rf, ok := ret.Get(0).(func(context.Context, ...gormprovider.QueryOption) []entity.Task); ok {
		r0 = rf(ctx, opts...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]entity.Task)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context, ...gormprovider.QueryOption) error); ok {
		r1 = rf(ctx, opts...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

type mockConstructorTestingTNewTaskRepository interface {
	mock.TestingT
	Cleanup(func())
}

// NewTaskRepository creates a new instance of TaskRepository. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
func NewTaskRepository(t mockConstructorTestingTNewTaskRepository) *TaskRepository {
	mock := &TaskRepository{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
