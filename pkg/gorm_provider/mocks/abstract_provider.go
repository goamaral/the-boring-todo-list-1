// Code generated by mockery v2.36.1. DO NOT EDIT.

package mock_gorm_provider

import (
	context "context"

	gorm "gorm.io/gorm"

	mock "github.com/stretchr/testify/mock"
)

// AbstractProvider is an autogenerated mock type for the AbstractProvider type
type AbstractProvider struct {
	mock.Mock
}

type AbstractProvider_Expecter struct {
	mock *mock.Mock
}

func (_m *AbstractProvider) EXPECT() *AbstractProvider_Expecter {
	return &AbstractProvider_Expecter{mock: &_m.Mock}
}

// GetDb provides a mock function with given fields:
func (_m *AbstractProvider) GetDb() *gorm.DB {
	ret := _m.Called()

	var r0 *gorm.DB
	if rf, ok := ret.Get(0).(func() *gorm.DB); ok {
		r0 = rf()
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*gorm.DB)
		}
	}

	return r0
}

// AbstractProvider_GetDb_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetDb'
type AbstractProvider_GetDb_Call struct {
	*mock.Call
}

// GetDb is a helper method to define mock.On call
func (_e *AbstractProvider_Expecter) GetDb() *AbstractProvider_GetDb_Call {
	return &AbstractProvider_GetDb_Call{Call: _e.mock.On("GetDb")}
}

func (_c *AbstractProvider_GetDb_Call) Run(run func()) *AbstractProvider_GetDb_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run()
	})
	return _c
}

func (_c *AbstractProvider_GetDb_Call) Return(_a0 *gorm.DB) *AbstractProvider_GetDb_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *AbstractProvider_GetDb_Call) RunAndReturn(run func() *gorm.DB) *AbstractProvider_GetDb_Call {
	_c.Call.Return(run)
	return _c
}

// NewTransaction provides a mock function with given fields: ctx, fc
func (_m *AbstractProvider) NewTransaction(ctx context.Context, fc func(context.Context) error) error {
	ret := _m.Called(ctx, fc)

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, func(context.Context) error) error); ok {
		r0 = rf(ctx, fc)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// AbstractProvider_NewTransaction_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'NewTransaction'
type AbstractProvider_NewTransaction_Call struct {
	*mock.Call
}

// NewTransaction is a helper method to define mock.On call
//   - ctx context.Context
//   - fc func(context.Context) error
func (_e *AbstractProvider_Expecter) NewTransaction(ctx interface{}, fc interface{}) *AbstractProvider_NewTransaction_Call {
	return &AbstractProvider_NewTransaction_Call{Call: _e.mock.On("NewTransaction", ctx, fc)}
}

func (_c *AbstractProvider_NewTransaction_Call) Run(run func(ctx context.Context, fc func(context.Context) error)) *AbstractProvider_NewTransaction_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(func(context.Context) error))
	})
	return _c
}

func (_c *AbstractProvider_NewTransaction_Call) Return(_a0 error) *AbstractProvider_NewTransaction_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *AbstractProvider_NewTransaction_Call) RunAndReturn(run func(context.Context, func(context.Context) error) error) *AbstractProvider_NewTransaction_Call {
	_c.Call.Return(run)
	return _c
}

// NewAbstractProvider creates a new instance of AbstractProvider. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewAbstractProvider(t interface {
	mock.TestingT
	Cleanup(func())
}) *AbstractProvider {
	mock := &AbstractProvider{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
