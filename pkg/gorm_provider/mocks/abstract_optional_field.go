// Code generated by mockery v2.36.1. DO NOT EDIT.

package mock_gorm_provider

import (
	context "context"

	clause "gorm.io/gorm/clause"

	driver "database/sql/driver"

	gorm "gorm.io/gorm"

	mock "github.com/stretchr/testify/mock"
)

// AbstractOptionalField is an autogenerated mock type for the AbstractOptionalField type
type AbstractOptionalField struct {
	mock.Mock
}

type AbstractOptionalField_Expecter struct {
	mock *mock.Mock
}

func (_m *AbstractOptionalField) EXPECT() *AbstractOptionalField_Expecter {
	return &AbstractOptionalField_Expecter{mock: &_m.Mock}
}

// Defined provides a mock function with given fields:
func (_m *AbstractOptionalField) Defined() bool {
	ret := _m.Called()

	var r0 bool
	if rf, ok := ret.Get(0).(func() bool); ok {
		r0 = rf()
	} else {
		r0 = ret.Get(0).(bool)
	}

	return r0
}

// AbstractOptionalField_Defined_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Defined'
type AbstractOptionalField_Defined_Call struct {
	*mock.Call
}

// Defined is a helper method to define mock.On call
func (_e *AbstractOptionalField_Expecter) Defined() *AbstractOptionalField_Defined_Call {
	return &AbstractOptionalField_Defined_Call{Call: _e.mock.On("Defined")}
}

func (_c *AbstractOptionalField_Defined_Call) Run(run func()) *AbstractOptionalField_Defined_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run()
	})
	return _c
}

func (_c *AbstractOptionalField_Defined_Call) Return(_a0 bool) *AbstractOptionalField_Defined_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *AbstractOptionalField_Defined_Call) RunAndReturn(run func() bool) *AbstractOptionalField_Defined_Call {
	_c.Call.Return(run)
	return _c
}

// GormValue provides a mock function with given fields: ctx, db
func (_m *AbstractOptionalField) GormValue(ctx context.Context, db *gorm.DB) clause.Expr {
	ret := _m.Called(ctx, db)

	var r0 clause.Expr
	if rf, ok := ret.Get(0).(func(context.Context, *gorm.DB) clause.Expr); ok {
		r0 = rf(ctx, db)
	} else {
		r0 = ret.Get(0).(clause.Expr)
	}

	return r0
}

// AbstractOptionalField_GormValue_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GormValue'
type AbstractOptionalField_GormValue_Call struct {
	*mock.Call
}

// GormValue is a helper method to define mock.On call
//   - ctx context.Context
//   - db *gorm.DB
func (_e *AbstractOptionalField_Expecter) GormValue(ctx interface{}, db interface{}) *AbstractOptionalField_GormValue_Call {
	return &AbstractOptionalField_GormValue_Call{Call: _e.mock.On("GormValue", ctx, db)}
}

func (_c *AbstractOptionalField_GormValue_Call) Run(run func(ctx context.Context, db *gorm.DB)) *AbstractOptionalField_GormValue_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(*gorm.DB))
	})
	return _c
}

func (_c *AbstractOptionalField_GormValue_Call) Return(_a0 clause.Expr) *AbstractOptionalField_GormValue_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *AbstractOptionalField_GormValue_Call) RunAndReturn(run func(context.Context, *gorm.DB) clause.Expr) *AbstractOptionalField_GormValue_Call {
	_c.Call.Return(run)
	return _c
}

// Value provides a mock function with given fields:
func (_m *AbstractOptionalField) Value() (driver.Value, error) {
	ret := _m.Called()

	var r0 driver.Value
	var r1 error
	if rf, ok := ret.Get(0).(func() (driver.Value, error)); ok {
		return rf()
	}
	if rf, ok := ret.Get(0).(func() driver.Value); ok {
		r0 = rf()
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(driver.Value)
		}
	}

	if rf, ok := ret.Get(1).(func() error); ok {
		r1 = rf()
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// AbstractOptionalField_Value_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Value'
type AbstractOptionalField_Value_Call struct {
	*mock.Call
}

// Value is a helper method to define mock.On call
func (_e *AbstractOptionalField_Expecter) Value() *AbstractOptionalField_Value_Call {
	return &AbstractOptionalField_Value_Call{Call: _e.mock.On("Value")}
}

func (_c *AbstractOptionalField_Value_Call) Run(run func()) *AbstractOptionalField_Value_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run()
	})
	return _c
}

func (_c *AbstractOptionalField_Value_Call) Return(_a0 driver.Value, _a1 error) *AbstractOptionalField_Value_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *AbstractOptionalField_Value_Call) RunAndReturn(run func() (driver.Value, error)) *AbstractOptionalField_Value_Call {
	_c.Call.Return(run)
	return _c
}

// NewAbstractOptionalField creates a new instance of AbstractOptionalField. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewAbstractOptionalField(t interface {
	mock.TestingT
	Cleanup(func())
}) *AbstractOptionalField {
	mock := &AbstractOptionalField{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
