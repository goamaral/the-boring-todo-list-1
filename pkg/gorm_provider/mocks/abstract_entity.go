// Code generated by mockery v2.36.1. DO NOT EDIT.

package mock_gorm_provider

import mock "github.com/stretchr/testify/mock"

// AbstractEntity is an autogenerated mock type for the AbstractEntity type
type AbstractEntity struct {
	mock.Mock
}

type AbstractEntity_Expecter struct {
	mock *mock.Mock
}

func (_m *AbstractEntity) EXPECT() *AbstractEntity_Expecter {
	return &AbstractEntity_Expecter{mock: &_m.Mock}
}

// GetID provides a mock function with given fields:
func (_m *AbstractEntity) GetID() uint {
	ret := _m.Called()

	var r0 uint
	if rf, ok := ret.Get(0).(func() uint); ok {
		r0 = rf()
	} else {
		r0 = ret.Get(0).(uint)
	}

	return r0
}

// AbstractEntity_GetID_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetID'
type AbstractEntity_GetID_Call struct {
	*mock.Call
}

// GetID is a helper method to define mock.On call
func (_e *AbstractEntity_Expecter) GetID() *AbstractEntity_GetID_Call {
	return &AbstractEntity_GetID_Call{Call: _e.mock.On("GetID")}
}

func (_c *AbstractEntity_GetID_Call) Run(run func()) *AbstractEntity_GetID_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run()
	})
	return _c
}

func (_c *AbstractEntity_GetID_Call) Return(_a0 uint) *AbstractEntity_GetID_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *AbstractEntity_GetID_Call) RunAndReturn(run func() uint) *AbstractEntity_GetID_Call {
	_c.Call.Return(run)
	return _c
}

// NewAbstractEntity creates a new instance of AbstractEntity. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewAbstractEntity(t interface {
	mock.TestingT
	Cleanup(func())
}) *AbstractEntity {
	mock := &AbstractEntity{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
